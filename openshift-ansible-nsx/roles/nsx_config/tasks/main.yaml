---
- name: Install python-devel
  yum:
    name: python-devel
    state: latest

- name: Install gcc
  yum:
    name: gcc
    state: present

- name: Install virtualenv
  pip:
    name: virtualenv

- name: remove existing nsx-config virtualenv
  file:
    state: absent
    path: "/tmp/nsx-config"

- name: create virtualenv
  command: virtualenv /tmp/nsx-config

- name: Download VSphere Automation SDK
  git:
    repo: "https://github.com/vmware/vsphere-automation-sdk-python"
    dest: /tmp/vsphere-automation-sdk-python/
    version: v6.6.1

- name: Install vmware-nsxlib
  command: "/tmp/nsx-config/bin/pip install vmware-nsxlib==11.1.4"

- name: Install VSphere Automation SDK
  command: "/tmp/nsx-config/bin/pip install -r /tmp/vsphere-automation-sdk-python/requirements.txt --extra-index-url /tmp/vsphere-automation-sdk-python/lib/"

- name: Remove OpenSSL in virtualenv
  file:
    state: absent
    path: "/tmp/nsx-config/lib/python2.7/site-packages/OpenSSL"

- name: Install pyOpenSSL 16.2.0
  command: "/tmp/nsx-config/bin/pip install pyOpenSSL==16.2.0"

- name: remove vsphere sdk git dir
  file:
    path: /tmp/vsphere-automation-sdk-python/
    state: absent

- name: NSX management plane resource configuration with cert
  command: "/tmp/nsx-config/bin/python '{{ playbook_dir }}'/../nsx_config.py --cert {{ nsx_cert_file_path }} --mp {{ nsx_manager_ip }} --k8scluster {{ cluster_name }} --edge_cluster {{ nsx_edge_cluster_name }} --tz {{ nsx_transport_zone_name }} --t0 {{ nsx_t0_router_name }} --pod_ipblock_name {{ pod_ipblock_name }} --pod_ipblock_cidr {{ pod_ipblock_cidr }} --snat_ippool_name {{ snat_ippool_name }} --snat_ippool_cidr {{ snat_ippool_cidr }} --start_range {{ start_range }} --end_range {{ end_range }} --node {{ os_node_name_list }} --node_ls {{ nsx_node_ls_name }} --node_lr {{ nsx_node_lr_name }} --node_network_cidr {{ node_network_cidr }} --vc_host {{ vc_host }} --vc_user {{ vc_user }} --vc_password {{ vc_password }} --vms {{ vms }}"
  when: perform_nsx_config == True and use_cert == True
  register: nsx_config_result

- name: NSX management plane resource configuration with user name
  command: "/tmp/nsx-config/bin/python '{{ playbook_dir }}'/../nsx_config.py --user {{ nsx_api_user }} --password {{ nsx_api_password }} --mp {{ nsx_manager_ip }} --k8scluster {{ cluster_name }} --edge_cluster {{ nsx_edge_cluster_name }} --tz {{ nsx_transport_zone_name }} --t0 {{ nsx_t0_router_name }} --pod_ipblock_name {{ pod_ipblock_name }} --pod_ipblock_cidr {{ pod_ipblock_cidr }} --snat_ippool_name {{ snat_ippool_name }} --snat_ippool_cidr {{ snat_ippool_cidr }} --start_range {{ start_range }} --end_range {{ end_range }} --node {{ os_node_name_list }} --node_ls {{ nsx_node_ls_name }} --node_lr {{ nsx_node_lr_name }} --node_network_cidr {{ node_network_cidr }} --vc_host {{ vc_host }} --vc_user {{ vc_user }} --vc_password {{ vc_password }} --vms {{ vms }}"
  when: perform_nsx_config == True and use_cert == False
  register: nsx_config_result

- name: remove nsx-config virtualenv
  file:
    state: absent
    path: "/tmp/nsx-config"

- name: Showing nsx_config stdout
  debug:
    msg: "{{ nsx_config_result.stdout }}"

- name: register overlay_tz id
  shell: "echo {{ nsx_config_result.stdout }} | awk '{print $2}'"
  register: overlay_tz_id

- name: Showing overlay_tz id
  debug:
    msg: "Overlay_tz id: {{ overlay_tz_id.stdout }}"

- name: register T0 id
  shell: "echo {{ nsx_config_result.stdout }} | awk '{print $4}'"
  register: t0_id

- name: Showing T0 router id
  debug:
    msg: "T0 id: {{ t0_id.stdout }}"

- name: register container_ip_blocks id
  shell: "echo {{ nsx_config_result.stdout }} | awk '{print $6}'"
  register: container_ip_blocks_id

- name: Showing container_ip_blocks id
  debug:
    msg: "container_ip_blocks id: {{ container_ip_blocks_id.stdout }}"

- name: register external_ip_pools id
  shell: "echo {{ nsx_config_result.stdout }} | awk '{print $8}'"
  register: external_ip_pools_id

- name: Showing external_ip_pools id
  debug:
    msg: "external_ip_pools id: {{ external_ip_pools_id.stdout }}"
