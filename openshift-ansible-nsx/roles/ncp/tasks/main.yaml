---
## start kube_proxy for oc 3.10 and later
- name: Add library to ansible.cfg
  replace:
    path: "{{ openshift_dir }}/ansible.cfg"
    regexp: "\\[defaults\\]"
    replace: "[defaults]\nlibrary = roles/lib_utils/library/"
  when: manual_start_kube_proxy != false

- name: create create_proxy under playbooks dir
  shell: "echo '---\n- import_playbook: byo/openshift_facts.yml\n- hosts: masters' > {{ openshift_dir }}/playbooks/create_proxy.yaml"
  when: manual_start_kube_proxy != false

- name: create create_proxy under playbooks dir
  shell: 'echo "  roles:" >> {{ openshift_dir }}/playbooks/create_proxy.yaml'
  when: manual_start_kube_proxy != false

- name: create create_proxy under playbooks dir
  shell: 'echo "    - kube_proxy_and_dns" >> {{ openshift_dir }}/playbooks/create_proxy.yaml'
  when: manual_start_kube_proxy != false

- name: run playbook create_proxy
  shell: "ansible-playbook -i {{ playbook_dir }}/hosts {{ openshift_dir }}/playbooks/create_proxy.yaml"
  when: manual_start_kube_proxy != false

## Configure Service Account for NCP
- name: Check if nsx-system project exists
  command: oc get project nsx-system
  register: nsx_project_result
  ignore_errors: True

- name: Display the output msg
  debug:
    msg: "{{ nsx_project_result }}"

- name: Create the project if it doesn't exist
  command: oc new-project nsx-system
  when: "'Error' in nsx_project_result.stderr"

- command: oc project nsx-system

- name: Download ncp-rbac
  get_url:
    url: "{{ ncp_rbac_yaml_url }}"
    dest: /tmp/ncp-rbac.yml
    force: yes

- name: Change API version for ncp-rbac
  replace:
    path: /tmp/ncp-rbac.yml
    regexp: "^apiVersion: rbac.authorization.k8s.io/v1.*"
    replace: "apiVersion: v1"

- name: Enable Route resource API access
  replace:
    path: /tmp/ncp-rbac.yml
    regexp: "# - routes"
    replace: "- routes"

- name: Comment out apiGroup for bmc env
  replace:
    path: /tmp/ncp-rbac.yml
    regexp: "apiGroup: rbac.authorization.k8s.io"
    replace: "# apiGroup: rbac.authorization.k8s.io"
  when: BMC == true or BMC == True

- name: Apply ncp-rbac
  command: oc apply -f /tmp/ncp-rbac.yml

- name: check if /etc/nsx-ujo dir exists
  stat:
    path: /etc/nsx-ujo
  register: ujo_exists

- name: Create dir if missing
  file: path=/etc/nsx-ujo state=directory
  when:
    ujo_exists.stat.exists == False

- name: Check if a token file is already present
  stat:
      path: /etc/nsx-ujo/ncp_token
  register: ncp_exists

- name: Get token name for ncp
  shell: "kubectl get serviceaccount ncp-svc-account -o yaml | grep -A1 secrets | tail -n1 | awk {'print $3'}"
  register: ncp_secret_result

- name: Copy ncp token to file
  shell: "kubectl get secret {{ ncp_secret_result.stdout }} -o yaml | grep 'token:' | awk {'print $2'} | base64 -d > /etc/nsx-ujo/ncp_token"

- name: Check if a token file is already present
  stat:
      path: /etc/nsx-ujo/node_agent_token
  register: node_agent_exists

- name: Get node agent token name
  shell: "kubectl get serviceaccount nsx-node-agent-svc-account -o yaml | grep -A1 secrets | tail -n1 | awk {'print $3'}"
  register: node_agent_secret_result

- name: Copy node agent to file
  shell: "kubectl get secret {{ node_agent_secret_result.stdout }} -o yaml | grep 'token:' | awk {'print $2'} | base64 -d > /etc/nsx-ujo/node_agent_token"

## Configure Security Context Constraint for NCP
- name: Download ncp-os-scc yaml
  get_url:
    url: "{{ ncp_scc_yaml_url }}"
    dest: /tmp/ncp-os-scc.yml
    force: yes

- name: Set DAC_OVERRIDE in ncp-os-scc
  replace:
        path: /tmp/ncp-os-scc.yml
        regexp: "# - DAC_OVERRIDE"
        replace: "- DAC_OVERRIDE"
  when: BMC == true or BMC == True

- name: Load ncp-scc
  command: oc apply -f /tmp/ncp-os-scc.yml

- name: Add nsx-node-agent-svc-account to ncp-scc
  command: oc adm policy add-scc-to-user ncp-scc -z ncp-svc-account

- name: Add nsx-node-agent-svc-account to ncp-scc
  command: oc adm policy add-scc-to-user ncp-scc -z nsx-node-agent-svc-account

### Obtain YAML files to run NCP and nsx-node-agent
- name: Download NCP yaml
  get_url:
    url: "{{ ncp_yaml_url }}"
    dest: /tmp/ncp-rc.yml
    force: yes

- name: Set service account for ncp
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#serviceAccountName: ncp-svc-account"
    replace: "serviceAccountName: ncp-svc-account"

- name: Set cluster name
  lineinfile:
    path: /tmp/ncp-rc.yml
    regexp: "^ *#?cluster =.*"
    line: "    cluster = {{ cluster_name }}"

- name: Set adaptor in ncp.ini
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#adaptor = kubernetes"
    replace: "adaptor = openshift"

- name: Set use_native_loadbalancer
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#use_native_loadbalancer = False"
    replace: "use_native_loadbalancer = {{ use_native_loadbalancer }}"

- name: Specify overlay_tz in ncp-rc
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#overlay_tz = <None>"
    replace: "overlay_tz = {{ nsx_transport_zone_name }}"

## Configure NSX top router name. From NSX 2.4.0 release onwards this is called
## top_tier_router before this it is tier0_router.
- name: Specify T0 router in ncp-rc
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#tier0_router = <None>"
    replace: "tier0_router = {{ nsx_t0_router_name }}"

- name: Specify Top T0 router in ncp-rc
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#top_tier_router = <None>"
    replace: "top_tier_router = {{ nsx_t0_router_name }}"

- name: Specify container_ip_blocks in ncp-rc
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#container_ip_blocks = <None>"
    replace: "container_ip_blocks = {{ pod_ipblock_name }}"

- name: Specify external_ip_pools in ncp-rc
  replace:
    path: /tmp/ncp-rc.yml
    regexp: "#external_ip_pools = <None>"
    replace: "external_ip_pools = {{ snat_ippool_name }}"

- name: Set apiserver host IP
  lineinfile:
    path: /tmp/ncp-rc.yml
    regexp: "^ *#?apiserver_host_ip =.*"
    line: "    apiserver_host_ip = {{ apiserver_host_ip }}"

- name: Set apiserver host port
  lineinfile:
    path: /tmp/ncp-rc.yml
    regexp: "^ *#?apiserver_host_port =.*"
    line: "    apiserver_host_port = 8443"

- name: Set NSX manager IP
  lineinfile:
    path: /tmp/ncp-rc.yml
    regexp: "^ *#?nsx_api_managers =.*"
    line: "    nsx_api_managers = {{ nsx_manager_ip }}"

- name: Set NSX API password
  lineinfile:
    path: /tmp/ncp-rc.yml
    regexp: "^    nsx_api_password"
    insertafter: "^ *nsx_api_managers"
    line: "    nsx_api_password = {{ nsx_api_password | replace('$', '$$') }}"
  when: use_cert != true

- name: Set NSX API username
  lineinfile:
    path: /tmp/ncp-rc.yml
    regexp: "^    nsx_api_user"
    insertafter: "^ *nsx_api_managers"
    line: "    nsx_api_user = {{ nsx_api_user }}"
  when: use_cert != true

- name: Skip checking certs
  lineinfile:
    path: /tmp/ncp-rc.yml
    regexp: "^ *#?insecure =.*"
    line: "    insecure = True"

- name: Set certificate info if set cert is set to true
  replace:
      path: /tmp/ncp-rc.yml
      regexp: "#nsx_api_cert_file = <None>"
      replace: "nsx_api_cert_file = /etc/nsx-ujo/nsx_cert"
  when: use_cert == true

- name: Set private key if set cert is set to true
  replace:
        path: /tmp/ncp-rc.yml
        regexp: "#nsx_api_private_key_file = <None>"
        replace: "nsx_api_private_key_file = /etc/nsx-ujo/nsx_priv_key"
  when: use_cert == true

- name: Set node_type to BAREMETAL for bmc env
  replace:
        path: /tmp/ncp-rc.yml
        regexp: "#node_type = HOSTVM"
        replace: "node_type = BAREMETAL"
  when: BMC == true or BMC == True

# Ensure idempotency
- name: Check whether /tmp/ncp-rc.yml contains "nsx-priv-key"
  command: grep "nsx-priv-key" /tmp/ncp-rc.yml
  register: checkpriv
  ignore_errors: yes

- name: if /tmp/ncp-rc.yml does not contain "nsx-priv-key"
  lineinfile:
      path: /tmp/ncp-rc.yml
      regexp: "^    volumeMounts"
      insertafter: "^ *volumeMounts:"
      line: "          - name: nsx-priv-key\n            mountPath: /etc/nsx-ujo/nsx_priv_key"
  when: checkpriv.rc != 0 and use_cert == true

- name: Greet the world if /tmp/ncp-rc.yml contains "nsx-priv-key"
  lineinfile:
      path: /tmp/ncp-rc.yml
      regexp: "^    volumes"
      insertafter: "^ *volumes:"
      line: "        - name: nsx-priv-key\n          hostPath:\n            path: {{ nsx_api_private_key_file }}"
  when: checkpriv.rc != 0 and use_cert == true

- name: Check whether /tmp/ncp-rc.yml contains "nsx-cert"
  command: grep "nsx-cert" /tmp/ncp-rc.yml
  register: checkcert
  ignore_errors: yes

- name: if /tmp/ncp-rc.yml does not contain "nsx-cert"
  lineinfile:
      path: /tmp/ncp-rc.yml
      regexp: "^    volumeMounts"
      insertafter: "^ *volumeMounts:"
      line: "          - name: nsx-cert\n            mountPath: /etc/nsx-ujo/nsx_cert"
  when: checkcert.rc != 0 and use_cert == true

- name: Greet the world if /tmp/ncp-rc.yml contains "nsx-cert"
  lineinfile:
      path: /tmp/ncp-rc.yml
      regexp: "^    volumes"
      insertafter: "^ *volumes:"
      line: "        - name: nsx-cert\n          hostPath:\n            path: {{ nsx_api_cert_file }}"
  when: checkcert.rc != 0 and use_cert == true

- name: Start NCP Replication Controller
  command: oc apply -f /tmp/ncp-rc.yml

## nsx-node-agent YAML
- name: Download agent yaml
  get_url:
    url: "{{ agent_yaml_url }}"
    dest: /tmp/nsx-node-agent-ds.yml

- name: Set service account for ncp
  replace:
    path: /tmp/nsx-node-agent-ds.yml
    regexp: "#serviceAccountName: nsx-node-agent-svc-account"
    replace: "serviceAccountName: nsx-node-agent-svc-account"

- name: Set cluster name
  lineinfile:
    path: /tmp/nsx-node-agent-ds.yml
    regexp: "^ *#?cluster =.*"
    line: "    cluster = {{ cluster_name }}"

- name: Set apiserver host IP
  lineinfile:
    path: /tmp/nsx-node-agent-ds.yml
    regexp: "^ *#?apiserver_host_ip =.*"
    line: "    apiserver_host_ip = {{ apiserver_host_ip }}"

- name: Set apiserver host port
  lineinfile:
    path: /tmp/nsx-node-agent-ds.yml
    regexp: "^ *#?apiserver_host_port =.*"
    line: "    apiserver_host_port = 8443"

- name: Set node_type to BAREMETAL for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "#node_type = HOSTVM"
        replace: "node_type = BAREMETAL"
  when: BMC == true or BMC == True

- name: Set ovs_bridge to BAREMETAL for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "#ovs_bridge = br-int"
        replace: "ovs_bridge = nsx-managed"
  when: BMC == true or BMC == True

- name: Set DAC_OVERRIDE for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "# - DAC_OVERRIDE"
        replace: "- DAC_OVERRIDE"
  when: BMC == true or BMC == True

- name: Mount nestdb-sock for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "# - name: nestdb-sock"
        replace: "- name: nestdb-sock"
  when: BMC == true or BMC == True

- name: Mount nestdb-sock for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "#   mountPath: /var/run/vmware/nestdb/nestdb-server.sock"
        replace: "  mountPath: /var/run/vmware/nestdb/nestdb-server.sock"
  when: BMC == true or BMC == True

- name: Volume nestdb-sock for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "# - name: nestdb-sock"
        replace: "- name: nestdb-sock"
  when: BMC == true or BMC == True

- name: Volume nestdb-sock for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "#   hostPath:"
        replace: "  hostPath:"
  when: BMC == true or BMC == True

- name: Volume nestdb-sock for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "#     path: /var/run/vmware/nestdb/nestdb-server.sock"
        replace: "    path: /var/run/vmware/nestdb/nestdb-server.sock"
  when: BMC == true or BMC == True

- name: Volume nestdb-sock for bmc env for node-agent
  replace:
        path: /tmp/nsx-node-agent-ds.yml
        regexp: "#     type: Socket"
        replace: "    type: Socket"
  when: BMC == true or BMC == True

- name: Override default node selector
  command: oc patch namespace nsx-system -p '{"metadata":{"annotations":{"openshift.io/node-selector":""}}}'

- name: Start nsx-node-agent DaemonSet
  command: oc apply -f /tmp/nsx-node-agent-ds.yml

# After ncp starts, start Openshift Registry and Router service
- name: Switch to default project
  command: oc project default

- name: Grant router service account access
  command: oc adm policy add-scc-to-user hostnetwork -z router

- name: Grant cluster view permission
  command: oc adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:default:router

- name: Start Openshift Router service
  command: oc adm router router --service-account=router

# In OS 3.7, if you have "registry" service account or "registry-registry-role"
# created, it will "fail" with "error" as below:
# serviceaccounts "registry" already exists
# clusterrole "registry-registry-role" already exists
# this should just be a warning as you'd get in adding router.
# You can ignore this as the registry will be created successfully anyway
- name: Grant Registry service access
  command: oc adm policy add-scc-to-user hostnetwork -z registry

- name: Start Openshift Registry service
  command: oc adm registry --service-account=registry

